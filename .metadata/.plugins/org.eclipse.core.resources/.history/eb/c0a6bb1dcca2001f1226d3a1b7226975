//package producer_consumer;
//
//import java.util.LinkedList;
//import java.util.Queue;
//
//public class SharedBuffer {
//    private final Queue<Integer> buffer;
//    private final int capacity;
//
//    public SharedBuffer(int capacity) {
//        this.buffer = new LinkedList<>();
//        this.capacity = capacity;
//    }
//
//    public void produce(int item) {
//        // Simulate producing an item
//        while (buffer.size() >= capacity) {
//            //System.out.println("Buffer is full, producer is waiting.");
//            if (buffer.size() > capacity) {
//            	System.err.println("Buffer beyond capacity");
//            }
//            Thread.yield();
//        }    
//        
//        buffer.add(item);
//        System.out.println("Produced: " + item);
//    }
//
//    public Integer consume() {
//        // Simulate consuming an item
//        while (buffer.isEmpty()) {
//            //System.out.println("Buffer is empty, consumer is waiting.");
//
//            Thread.yield();
//        }
//        
//        	
//        Integer item = buffer.poll();
//        //System.out.println("Consumed: " + item);
//        return item;
//        
//    }
//}
//
//

package producer_consumer;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.TimeUnit;

public class SharedBuffer {
    private final BlockingQueue<Integer> buffer;
    private final int capacity;

    public SharedBuffer(int capacity) {
        this.buffer = new ArrayBlockingQueue<>(capacity);
        this.capacity = capacity;
    }

    public void produce(int item) {
        try {
            // Will block if buffer is full
            boolean success = buffer.offer(item, 1, TimeUnit.SECONDS);
            if (success) {
                System.out.println("Produced: " + item);
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    public Integer consume() {
        try {
            // Will block if buffer is empty
            Integer item = buffer.poll(1, TimeUnit.SECONDS);
            if (item != null) {
                System.out.println("Consumed: " + item);
            }
            return item;
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            return null;
        }
    }
}