package threaded;

import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.concurrent.*;

public class ThreadedWordCount {
	private Map<String, Integer> wordCount = new ConcurrentHashMap<>();

	public Map<String, Integer> countWords(List<String> filePaths, int threadCount) {
		long startTime = System.currentTimeMillis();

		int filesPerThread = (int) Math.ceil((double) filePaths.size() / threadCount);
		List<Thread> threads = new ArrayList<>();

		for (int i = 0; i < threadCount; i++) {
			int startIndex = i * filesPerThread;
			int endIndex = Math.min(startIndex + filesPerThread, filePaths.size());

			if (startIndex >= filePaths.size()) break;

			List<String> threadFiles = filePaths.subList(startIndex, endIndex);
			Thread thread = new Thread(() -> {
				for (String filePath : threadFiles) {
					processFile(filePath);
				}
			});
			threads.add(thread);
			thread.start();
		}

		for (Thread thread : threads) {
			try {
				thread.join();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}

		long endTime = System.currentTimeMillis();
		System.out.println(threadCount + " threads execution time: " + (endTime - startTime) + "ms");
		return wordCount;
	}

	private void processFile(String filePath) {
		try {
			List<String> lines = Files.readAllLines(Paths.get(filePath));
			for (String line : lines) {
				if (line.trim().isEmpty()) continue;

				String cleanedLine = line.toLowerCase()
						.replaceAll("[^a-zA-Z\\s]", "")
						.trim();

				String[] words = cleanedLine.split("\\s+");
				for (String word : words) {
					if (!word.isEmpty()) {
						wordCount.merge(word, 1, Integer::sum);
					}
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		String directoryPath = "C:\\Users\\Devyanii\\Desktop\\JAVA\\A8\\Assignment8\\Assignment8\\";
		List<String> filePaths = getFilePaths(directoryPath);

		if (filePaths.isEmpty()) {
			System.err.println("No files found in the directory!");
			return;
		}

		System.out.println("Number of files to process: " + filePaths.size());
		System.out.println("\n--- Starting Threaded Word Count ---\n");

		ThreadedWordCount counter = new ThreadedWordCount();
		int[] threadCounts = {2, 5, 10, 15, 20};

		for (int threadCount : threadCounts) {
			System.out.println("\nTesting with " + threadCount + " threads:");
			Map<String, Integer> result = counter.countWords(filePaths, threadCount);
		}
	}

	private static List<String> getFilePaths(String directoryPath) {
		File directory = new File(directoryPath);
		List<String> filePaths = new ArrayList<>();

		if (directory.exists() && directory.isDirectory()) {
			for (int i = 1; i <= 20; i++) {
				File file = new File(directory, "dracula" + i);
				if (file.exists() && !file.isDirectory()) {
					filePaths.add(file.getAbsolutePath());
				}
			}
			Collections.sort(filePaths);
		}

		return filePaths;
	}
}
