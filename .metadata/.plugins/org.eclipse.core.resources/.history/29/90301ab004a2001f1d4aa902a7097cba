package producer_consumer;

import java.util.LinkedList;
import java.util.Queue;

public class SharedBuffer {
    private final Queue<Integer> buffer;
    private final int capacity;

    public SharedBuffer(int capacity) {
        this.buffer = new LinkedList<>();
        this.capacity = capacity;
    }

    public void produce(int item) {
        // Simulate producing an item
        while (buffer.size() >= capacity) {
            //System.out.println("Buffer is full, producer is waiting.");
            if (buffer.size() > capacity) {
            	System.err.println("Buffer beyond capacity");
            }
            Thread.yield();
        }    
        
        buffer.add(item);
        System.out.println("Produced: " + item);
    }

    public Integer consume() {
        // Simulate consuming an item
        while (buffer.isEmpty()) {
            //System.out.println("Buffer is empty, consumer is waiting.");

            Thread.yield();
        }
        
        	
        Integer item = buffer.poll();
        //System.out.println("Consumed: " + item);
        return item;
        
    }
}


