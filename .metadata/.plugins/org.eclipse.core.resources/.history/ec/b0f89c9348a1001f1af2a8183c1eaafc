package threadpool;

import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.stream.Stream;

public class ThreadpoolWordCount {
    private final Map<String, Integer> wordCounts = new ConcurrentHashMap<>();

    public static void main(String[] args) {
        ThreadpoolWordCount wc = new ThreadpoolWordCount();
        wc.countWords();
    }

    private void countWords() {
        ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
        List<Future<?>> futures = new ArrayList<>(); // List to keep track of all futures.

        long startTime = System.currentTimeMillis(); // Start timing

        try (Stream<Path> paths = Files.walk(Paths.get("C:\\Users\\Devyanii\\Desktop\\JAVA\\A8\\Assignment8\\Assignment8"))) {
            paths.filter(Files::isRegularFile).forEach(file -> {
                // Submit each file processing as a separate task to the executor.
                Future<?> future = executor.submit(() -> processFile(file));
                futures.add(future);
            });
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Await all futures to complete
        for (Future<?> future : futures) {
            try {
                future.get(); // Wait for each task to complete
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
        }

        executor.shutdown();
        try {
            if (executor.awaitTermination(1, TimeUnit.HOURS)) {
                long endTime = System.currentTimeMillis(); // End timing
                printWordCounts();
                System.out.println("Time taken: " + (endTime - startTime) + " ms");
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    private void processFile(Path file) {
        try (BufferedReader reader = Files.newBufferedReader(file)) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.trim().isEmpty())
                    continue;
                String[] words = line.toLowerCase().replaceAll("[^a-z ]", "").split("\\s+");
                for (String word : words) {
                    wordCounts.merge(word, 1, Integer::sum);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void printWordCounts() {
        //wordCounts.forEach((word, count) -> System.out.println(word + ": " + count));
    }
}
