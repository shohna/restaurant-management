package unthreaded;

import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.concurrent.*;

public class UnthreadedWordCount {
    private Map<String, Integer> wordCount = new ConcurrentHashMap<>();
    
    public Map<String, Integer> countWords(List<String> filePaths) {
        long startTime = System.currentTimeMillis();
        
        for (String filePath : filePaths) {
            processFile(filePath);
        }
        
        long endTime = System.currentTimeMillis();
        System.out.println("Unthreaded execution time: " + (endTime - startTime) + "ms");
        return wordCount;
    }
    
    private void processFile(String filePath) {
        try {
            List<String> lines = Files.readAllLines(Paths.get(filePath));
            for (String line : lines) {
                if (line.trim().isEmpty()) 
                	continue;
                
                String cleanedLine = line.toLowerCase().replaceAll("[^a-zA-Z\\s]", "").trim();
                
                String[] words = cleanedLine.split("\\s+");
                for (String word : words) {
                    if (!word.isEmpty()) {
                        wordCount.merge(word, 1, Integer::sum);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        String directoryPath = "C:\\Users\\Devyanii\\Desktop\\JAVA\\A8\\Assignment8\\Assignment8\\";
        List<String> filePaths = getFilePaths(directoryPath);
        
        if (filePaths.isEmpty()) {
            System.err.println("No files found in the directory!");
            return;
        }

        System.out.println("Number of files to process: " + filePaths.size());
        System.out.println("\n--- Starting Unthreaded Word Count ---\n");
        
        UnthreadedWordCount counter = new UnthreadedWordCount();
        Map<String, Integer> result = counter.countWords(filePaths);
        printAllWords(result);
    }
    
    private static List<String> getFilePaths(String directoryPath) {
        File directory = new File(directoryPath);
        List<String> filePaths = new ArrayList<>();
        
        if (directory.exists() && directory.isDirectory()) {
            for (int i = 1; i <= 20; i++) {
                File file = new File(directory, "dracula" + i);
                if (file.exists() && !file.isDirectory()) {
                    filePaths.add(file.getAbsolutePath());
                }
            }
        }
        
        return filePaths;
    }
    
    private static void printAllWords(Map<String, Integer> wordCount) {
        System.out.println("Word                 Count");
        System.out.println("----------------------------------------");
        
        // Print directly from the map without sorting
        for (Map.Entry<String, Integer> entry : wordCount.entrySet()) {
            System.out.printf("%-20s: %d%n", entry.getKey(), entry.getValue());
        }
        
        int totalWords = wordCount.values().stream().mapToInt(Integer::intValue).sum();
        System.out.println("Total word count: " + totalWords);
    }
}