package unthreaded;

import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.concurrent.*;

public class UnthreadedWordCount {
    private Map<String, Integer> wordCount = new ConcurrentHashMap<>();
    
    public Map<String, Integer> countWords(List<String> filePaths) {
        long startTime = System.currentTimeMillis();
        
        for (String filePath : filePaths) {
            processFile(filePath);
        }
        
        long endTime = System.currentTimeMillis();
        System.out.println("Unthreaded execution time: " + (endTime - startTime) + "ms");
        return wordCount;
    }
    
    private void processFile(String filePath) {
        try {
            List<String> lines = Files.readAllLines(Paths.get(filePath));
            for (String line : lines) {
                if (line.trim().isEmpty()) continue;
                
                // Clean and process the line
                String cleanedLine = line.toLowerCase()
                    .replaceAll("[^a-zA-Z\\s]", "")
                    .trim();
                
                String[] words = cleanedLine.split("\\s+");
                for (String word : words) {
                    if (!word.isEmpty()) {
                        wordCount.merge(word, 1, Integer::sum);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}