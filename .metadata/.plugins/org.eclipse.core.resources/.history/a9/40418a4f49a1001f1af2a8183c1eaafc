package main;

import threaded.ThreadedWordCount;
import threadpool.ThreadpoolWordCount;
import unthreaded.UnthreadedWordCount;

import java.io.File;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        // Get list of files from the directory containing Dracula text files
        String directoryPath = "C:\\Users\\Devyanii\\Desktop\\JAVA\\A8\\Assignment8\\Assignment8"; // Update this path
        List<String> filePaths = getFilePaths(directoryPath);
        
        // Print system information
        int processors = Runtime.getRuntime().availableProcessors();
        System.out.println("Available processors: " + processors);
        System.out.println("Number of files to process: " + filePaths.size());
        System.out.println("\n--- Starting Word Count Comparisons ---\n");
        
        // Run unthreaded version
        System.out.println("Running unthreaded version:");
        UnthreadedWordCount unthreaded = new UnthreadedWordCount();
        Map<String, Integer> result1 = unthreaded.countWords(filePaths);
        printTopWords(result1, 10);
        
        System.out.println("\nRunning threaded versions:");
        ThreadedWordCount threaded = new ThreadedWordCount();
        // Test with different thread counts
        int[] threadCounts = {2, 5, 10, 15, 20};
        for (int threadCount : threadCounts) {
            System.out.println("\nTesting with " + threadCount + " threads:");
            Map<String, Integer> result2 = threaded.countWords(filePaths, threadCount);
            // Verify results match unthreaded version
            if (!compareResults(result1, result2)) {
                System.out.println("WARNING: Results differ from unthreaded version!");
            }
        }
        
        System.out.println("\nRunning thread pool version:");
        ThreadpoolWordCount threadpool = new ThreadpoolWordCount();
        Map<String, Integer> result3 = threadpool.countWords(filePaths);
        // Verify results match unthreaded version
        if (!compareResults(result1, result3)) {
            System.out.println("WARNING: Results differ from unthreaded version!");
        }
    }
    
    private static List<String> getFilePaths(String directoryPath) {
        File directory = new File(directoryPath);
        List<String> filePaths = new ArrayList<>();
        
        if (directory.exists() && directory.isDirectory()) {
            File[] files = directory.listFiles((dir, name) -> name.toLowerCase().endsWith(".txt"));
            if (files != null) {
                for (File file : files) {
                    filePaths.add(file.getAbsolutePath());
                }
            }
        } else {
            System.err.println("Directory not found: " + directoryPath);
            System.exit(1);
        }
        
        return filePaths;
    }
    
    private static void printTopWords(Map<String, Integer> wordCount, int topN) {
        System.out.println("\nTop " + topN + " most frequent words:");
        wordCount.entrySet().stream()
            .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
            .limit(topN)
            .forEach(entry -> System.out.printf("%-20s: %d%n", entry.getKey(), entry.getValue()));
    }
    
    private static boolean compareResults(Map<String, Integer> map1, Map<String, Integer> map2) {
        if (map1.size() != map2.size()) return false;
        return map1.entrySet().stream()
            .allMatch(e -> e.getValue().equals(map2.get(e.getKey())));
    }
}